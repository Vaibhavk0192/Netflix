generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  image          String
  email          String?    @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  favouriteIds   String[]
  profile        String[]
  sessions       Session[]
  accounts       Account[]
  Profiles       Profiles[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  videoUrl       String
  thumbnailUrl   String
  genre          String
  duration       String
  cast           String
  tag            String
  tagDescription String
}

model Profiles {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  imageUrl    String
  favourites  String[]
  likedMovies String[]
  userId      String   @db.ObjectId
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
